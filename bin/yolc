#!/usr/bin/env bash
# Copyright   : (c) 2023 Miao, ZhiCheng
# License     : LGPL-3
# Maintainer  : zhicheng.miao@gmail.com
# Synopsis    : yolc, the YulDSL commandline compiler

#-----------------------------------------------------------------------------------------------------------------------
# Main Program, Utilities & Global Variables
#-----------------------------------------------------------------------------------------------------------------------

opt_verbose=; function when_verbose() { [[ -n "$opt_verbose" ]]; }
is_nix_dist=
dist_path=
cmpl_id=2
out_dir="$PWD"/build
declare -a runyol_extra_opts=(-O0)

help() {
  cat <<EOF
yolc, the YulDSL commandline transpiler.

Usage: yolc [options] yol_module_spec...

-m [output_mode] Valid output modes: yul (default), show, plantuml
-v               Output more information about what is going on
-h               Display this help and exit

yol_module_spec: package_path{:module_name}{[symbol...,]}, where
    1) without specifying a module_name, 'Project' module is loaded instead,
    2) the default symbol for a module is 'object :: YulObject', otherwise symbols are of type 'Fn a b',
    3) the required symbol for a 'Project' module is 'manifest :: Manifest', no other symbol is supported.

EOF
}

die() {
  echo "$@"
  exit 1
}

debug() {
  echo "$@" >&2
}

runyol() {
  if when_verbose; then
    debug "+ runyol" "$@"
    cabal build "${runyol_extra_opts[@]}" runyol "$@" >&2 && \
      cabal run "${runyol_extra_opts[@]}" runyol "$@"
  else
    # silent the stdout of the build process
    cabal build "${runyol_extra_opts[@]}" runyol "$@" >/dev/null && \
      cabal run "${runyol_extra_opts[@]}" runyol "$@"
  fi
}

main() {
  local PROGRAM_PATH="$0"
  local OPTIND OPTARG
  local cmpl_name

  # parse options
  while getopts m:hv o; do
    case $o in
      m)
        cmpl_name=$OPTARG
        case "$OPTARG" in
          yul)
            cmpl_id=2
            ;;
          plantuml)
            cmpl_id=1
            ;;
          show)
            cmpl_id=0
            ;;
          *)
            die "Unknown output mode"
            ;;
        esac
        ;;
      v)
        opt_verbose=1
      ;;
      h)
        help; exit 0
        ;;
      *)
        help; exit 1
        ;;
    esac
  done
  shift $(( "$OPTIND" - 1 ))

  # detect distribution mode
  [[ -z "${PROGRAM_PATH##/nix/store}" ]] && is_nix_dist=1
  if [[ -n "$is_nix_dist" ]]; then
    dist_path=$(nix metadata --json | jq -r .path)
  else
    dist_path=$(readlink -f "$(dirname "$PROGRAM_PATH")"/..)
  fi
  ## TODO support nix-distribution mode
  [[ -n "$is_nix_dist" ]] && die "Nix-distribution mode not supported"

  when_verbose && {
    debug "Distribution path: $dist_path"
    debug "Output mode: $cmpl_name"
    debug "Output directory: $out_dir"
    debug
  }

  mkdir -p "$out_dir"

  for i in "$@"; do
    build_yol_module "$i"
  done

  exit 0
}

#-----------------------------------------------------------------------------------------------------------------------
# Yol Module Builder
#-----------------------------------------------------------------------------------------------------------------------

build_yol_module() {
  #
  # Parse Yol Module Spec
  #

  local mod_spec
  mod_spec=$1
  when_verbose && debug "=== Building yol module: $mod_spec"

  # parse pkg_path, cabal_path, pkg_name
  local rest pkg_path cabal_path pkg_name
  IFS=: read -r pkg_path rest <<< "$mod_spec"
  pkg_path=$(readlink -f "$pkg_path")
  [ -d "$pkg_path" ] || die "Package path not a directory: $pkg_path"
  cabal_path=$(echo "$pkg_path"/*.cabal)
  [ -f "$cabal_path" ] || die "Does not look like a cabal package: $pkg_path"
  pkg_name=$(sed -nE -e 's|^name:\s*(.+)\s*$|\1|p' < "$cabal_path")
  [ -n "$pkg_name" ] || die "Package name cannot be detected, is it a valid cabal file?"

  # parse mod_name
  if [ -n "$rest" ]; then
    local mod_name
    # separate module name from symbols
    read -r mod_name rest <<< "$(echo -n "$rest" | sed -nE -e 's|^([.0-9a-zA-Z]+)(\[(.*)\])?$|\1 \3|gp')"
    [ -z "$mod_name" ] && die "Module name cannot be extracted: $rest"
  fi

  # parse cmpl_mode, cmpl_syms
  local cmpl_mode cmpl_syms yol_dir
  cmpl_syms=$(echo -n "$rest" | sed -e 's|\s*,\s*| |g')
  if [ -z "$mod_name" ]; then
    mod_name=Project
    cmpl_mode=projectMode
    cmpl_syms=manifest
    yol_dir=${pkg_name}
  elif [ -z "$cmpl_syms" ]; then
    cmpl_mode=objectMode # object mode
    cmpl_syms=object
    yol_dir=${pkg_name}.${mod_name}
  else
    cmpl_mode=fnMode # fn mode
    yol_dir=${pkg_name}.${mod_name}.custom
  fi
  yol_dir=$out_dir/${yol_dir}
  mkdir -p "$yol_dir"

  when_verbose && {
    debug "Package path: $pkg_path"
    debug "Cabal file: $cabal_path"
    debug "Package name: $pkg_name"
    debug "Module name: $mod_name"
    debug "Compiler mode: $cmpl_mode"
    [ -n "$cmpl_syms" ] && debug "Custom compilation symbols: $cmpl_syms"
    debug "Yol module build directory: $yol_dir"
  }

  #
  # Build
  #

  # prepare cabal build files and build
  cat > "$yol_dir"/cabal.project <<EOF
packages:
  $dist_path/3rd-parties/linear-smc-2.2.3
  $dist_path/hs-pkgs/yul-dsl
  $dist_path/hs-pkgs/yul-dsl-linear-smc
  $cabal_path
  $yol_dir/runyol.cabal
EOF

  # instantiate runyol.cabal template
  {
    sed -e "s|__YOL_PKG_NAME__|$pkg_name|g"
  } < "$dist_path"/templates/runyol.cabal > "$yol_dir"/runyol.cabal

  # instantiate RunYol.hs template
  local actions
  actions=$(for i in $cmpl_syms; do
              echo -n "putStrLn $ $cmpl_mode (compilers !! $cmpl_id) $i"
            done)
  {
    sed -e "s|__YOL_MOD_NAME__|${mod_name}|g" \
        -e "s|__COMPILE_ACTIONS__|${actions}|g"
  } < "$dist_path"/templates/RunYol.hs > "$yol_dir"/RunYol.hs

  when_verbose && {
    debug
    debug "=== BEGIN cabal.project"
    cat "$yol_dir"/cabal.project >&2
    debug "=== END cabal.project"
    debug
    debug "=== BEGIN runyol.cabal"
    cat "$yol_dir"/runyol.cabal >&2
    debug "=== END runyol.cabal"
    debug
    debug "=== BEGIN RunYol.hs"
    cat "$yol_dir"/RunYol.hs >&2
    debug "=== END RunYol.hs"
  }

  runyol --project-file="$yol_dir"/cabal.project \
         --builddir="$out_dir/yolc" \
    || die "Failed to build yol module: $mod_spec"

  when_verbose && {
    debug "=== Done with yol module: $mod_spec"
    debug
  }
}

main "$@"
